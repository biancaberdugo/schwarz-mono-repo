{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Project Simulation Example","text":"<p>This project was designed to simulate critical components of the proposed architecture.</p>"},{"location":"#components-and-services","title":"Components and Services","text":"<p>The simulation includes the following key components and services:</p> <ul> <li> <p>BFF API Example: </p> </li> <li> <p>Provides a simplified backend-for-frontend interface tailored specifically for an application.</p> </li> <li> <p>Generates mock responses representing results from hypothetical backend services.</p> </li> <li> <p>Pub/Sub to BigQuery Sink:</p> </li> <li> <p>Simulates the ingestion pipeline, transferring GPS coordinates published by the application into a BigQuery landing layer.</p> </li> <li> <p>Infra as code:</p> </li> <li> <p>Terraform code executed locally for managing resources at GCP</p> </li> <li> <p>Github Actions</p> </li> <li>Simulates minimum CD for building API image and deployments on GKE</li> </ul>"},{"location":"#dataset-simulation","title":"Dataset Simulation","text":"<p>The provided dataset simulates realistic GPS coordinates for vehicles traveling along routes between selected cities. Each GPS record contains the following data:</p> <ul> <li>Timestamp indicating when the GPS coordinate was captured.</li> <li>Latitude and Longitude representing vehicle location.</li> <li>Clearly defined Start and End Coordinates for each trip.</li> <li>Car ID</li> <li>City ID</li> <li>Trip ID</li> <li>User ID</li> <li>Driver ID</li> <li>Event ID</li> </ul>"},{"location":"#simulation-details","title":"Simulation Details","text":"<ul> <li>Cities Included:</li> <li>San Francisco</li> <li>Chicago</li> <li>Seattle</li> <li>New York</li> <li> <p>Los Angeles</p> </li> <li> <p>Number of Cars Simulated: 1,000</p> </li> <li>Total Number of Trips: 5,000 (5 trips per car)</li> <li>Average Duration per Trip: 15 minutes</li> </ul> <p></p>"},{"location":"#public-endpoint-sample","title":"Public endpoint sample","text":"<p>Accessible here</p>"},{"location":"architecture/","title":"Architecture Design","text":"<p>Drawio diagram: architecture.drawio</p>"},{"location":"challenge/","title":"Problem Statement","text":""},{"location":"challenge/#assignment-cloud-platform-engineer","title":"ASSIGNMENT - CLOUD PLATFORM ENGINEER","text":"<p>As mentioned during the first call, next interview will be a technical use case. We would kindly ask you to work on this ahead of the next interview. Also, it would be great if you could send us your solution/ideas before the interview, so that we can review it.</p>"},{"location":"challenge/#assignment","title":"Assignment","text":"<p>The goal of this assignment is not to develop a perfect solution, but to get a better understanding of your skills and experience in the Cloud and Software Engineering field as well as see how you approach certain questions and challenges.</p> <p>If you have any questions regarding the assignment, please don't hesitate to get in touch with us at any time.  General: - You can use any programming language (our recommendation is Python) or design pattern - The solution should be flexible, stable and scalable as well as ensure a good code and architecture quality (we want to bring this into production as a next step) - We don't expect you to spin up any costly machines in the cloud or elsewhere to process Gigabytes or Terabytes of data or showcase infrastructure - Unless stated otherwise, you can use any tool from one of the major cloud providers or any other system that you like (our preference is StackIT, Azure or GCP)</p>"},{"location":"challenge/#introduction","title":"Introduction:","text":"<p>Imagine we are running a global business operating taxis in major cities of the world, in total its more than 11.000 cars worldwide. Our taxis are operating 24/7/365 and complete small or large trips throughout the day. From our headquarters we have to ensure many things in order to run the business, e.g. we have to ensure receipts are generated for every trip, our management can review various metrics from the trips (e.g. revenue per city, length of the trips, ...), we can prevent fraud or plan where we place our taxis within the city throughout the day.</p> <ul> <li>Architecture:</li> <li>Design an architecture that allows us to collect, process and analyze data from our taxi   operation as well as send data back to individual cars and communicate with our users</li> <li>Automation</li> <li>Develop a script to automate the setup and maintenance of your architecture. Its ok if   its only parts of it or 2-3 components and not the whole architecture. We should be able   to rollout the components but also update the whole or individual parts of it</li> <li>Data Exfiltration and Infiltration</li> <li>Think about how to secure the data we are collecting for this use case and the platform     in general. What tools and approaches can be used to minimize the risk of unwanted</li> <li>Vision</li> <li>Create a vision for the future of our taxi company data platform, what are going to be       important pillars and elements that we should focus on in the next 2-3 years.</li> </ul>"},{"location":"todo/","title":"Project TODOs","text":"<p>This document outlines the key upcoming tasks and improvements required for this project. These tasks aim to improve automation, security, and architecture in the system.</p>"},{"location":"todo/#immediate-priorities","title":"\u2705 Immediate Priorities","text":""},{"location":"todo/#1-continuous-integration-ci","title":"1. Continuous Integration (CI)","text":"<ul> <li>[ ] Implement CI pipelines to execute unit tests before building Docker images.</li> <li>[ ] Ensure pipelines fail early if tests do not pass.</li> <li>[ ] Implement more unit and it tests</li> </ul>"},{"location":"todo/#2-security-improvements","title":"2. Security Improvements","text":"<ul> <li>[ ] Enhance cloud security by implementing stricter access control and securing credentials/tokens.</li> <li>[ ] Establish policies for key rotation.</li> </ul>"},{"location":"todo/#3-authentication-layer","title":"3. Authentication Layer","text":"<ul> <li>[ ] Develop a complete Authentication Layer to manage user identity and sessions.</li> <li>[ ] Implement support for audience-based tokens to securely authenticate with external services.</li> </ul>"},{"location":"todo/#4-deployment-platform-refactor","title":"4. Deployment Platform Refactor","text":"<ul> <li>[ ] Refactor the entire API deployment process.</li> <li>[ ] Integrate Argo CD for GitOps-based continuous delivery and progressive delivery strategies.</li> <li>[ ] Optimize build, deploy, and release pipelines using Argo workflows where needed.</li> </ul>"},{"location":"todo/#5-code-formatting-linting","title":"5. Code Formatting &amp; Linting","text":"<ul> <li>[ ] Add automation to enforce code quality standards.</li> <li>[ ] Integrate tools such as pylint, black, and ruff in the CI pipeline.</li> </ul>"},{"location":"todo/#contributing","title":"Contributing","text":"<p>For any contributions or suggestions, please open an issue or create a pull request.</p>"}]}